'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var http = require('http');

/** HELPER METHODS */
const createMiddlewareFromRoute = ({ path, handler, method, }) => ({
    method,
    handler: handler || path,
    path: typeof path === 'string' ? path : '/',
});
const pushMiddleware = (mw) => ({ path, handler, method, handlers, type, }) => {
    const m = createMiddlewareFromRoute({ path, handler, method, type });
    let waresFromHandlers = [];
    if (handlers) {
        waresFromHandlers = handlers.map((handler) => createMiddlewareFromRoute({
            path,
            handler,
            method,
            type,
        }));
    }
    for (const mdw of [m, ...waresFromHandlers]) {
        mw.push({ ...mdw, type });
    }
};
/**
 * tinyhttp Router. Manages middleware and has HTTP methods aliases, e.g. `app.get`, `app.put`
 */
class Router {
    constructor() {
        this.middleware = [];
        this.mountpath = '/';
        this.apps = {};
    }
    get(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'GET',
            type: 'route',
        });
        return this;
    }
    post(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'POST',
            type: 'route',
        });
        return this;
    }
    put(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'PUT',
            type: 'route',
        });
        return this;
    }
    patch(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'PATCH',
            type: 'route',
        });
        return this;
    }
    head(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'HEAD',
            type: 'route',
        });
        return this;
    }
    delete(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'DELETE',
            type: 'route',
        });
        return this;
    }
    options(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'OPTIONS',
            type: 'route',
        });
        return this;
    }
    checkout(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'CHECKOUT',
            type: 'route',
        });
        return this;
    }
    copy(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'COPY',
            type: 'route',
        });
        return this;
    }
    lock(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'LOCK',
            type: 'route',
        });
        return this;
    }
    unlock(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'LOCK',
            type: 'route',
        });
        return this;
    }
    merge(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'MERGE',
            type: 'route',
        });
        return this;
    }
    mkactivity(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'MKACTIVITY',
            type: 'route',
        });
        return this;
    }
    mkcol(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'MKCOL',
            type: 'route',
        });
        return this;
    }
    move(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'MOVE',
            type: 'route',
        });
        return this;
    }
    search(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'SEARCH',
            type: 'route',
        });
        return this;
    }
    msearch(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'M-SEARCH',
            type: 'route',
        });
        return this;
    }
    notify(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'NOTIFY',
            type: 'route',
        });
        return this;
    }
    purge(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'PURGE',
            type: 'route',
        });
        return this;
    }
    report(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'REPORT',
            type: 'route',
        });
        return this;
    }
    subscribe(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'SUBSCRIBE',
            type: 'route',
        });
        return this;
    }
    unsubscribe(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'UNSUBSCRIBE',
            type: 'route',
        });
        return this;
    }
    trace(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'TRACE',
            type: 'route',
        });
        return this;
    }
    acl(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'ACL',
            type: 'route',
        });
        return this;
    }
    connect(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'CONNECT',
            type: 'route',
        });
        return this;
    }
    bind(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'BIND',
            type: 'route',
        });
        return this;
    }
    unbind(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'UNBIND',
            type: 'route',
        });
        return this;
    }
    rebind(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'REBIND',
            type: 'route',
        });
        return this;
    }
    link(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'LINK',
            type: 'route',
        });
        return this;
    }
    unlink(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'UNLINK',
            type: 'route',
        });
        return this;
    }
    mkcalendar(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'MKCALENDAR',
            type: 'route',
        });
        return this;
    }
    propfind(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'PROPFIND',
            type: 'route',
        });
        return this;
    }
    proppatch(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'PROPPATCH',
            type: 'route',
        });
        return this;
    }
    source(...args) {
        pushMiddleware(this.middleware)({
            path: args[0],
            handler: args[1],
            handlers: args.slice(2),
            method: 'SOURCE',
            type: 'route',
        });
        return this;
    }
    all(...args) {
        for (const method of http.METHODS) {
            pushMiddleware(this.middleware)({
                ...args,
                method,
                type: 'route',
            });
        }
        return this;
    }
    /**
     * Return the app's absolute pathname
     * based on the parent(s) that have
     * mounted it.
     *
     * For example if the application was
     * mounted as "/admin", which itself
     * was mounted as "/blog" then the
     * return value would be "/blog/admin".
     *
     */
    path() {
        return this.parent ? this.parent.path() + this.mountpath : '';
    }
    /**
     * Push middleware to the stack
     * @param path path that middleware will handle if request URL starts with it
     * @param handler handler function
     * @param handlers the rest handler functions
     */
    use(...args) {
        const path = args[0];
        const handler = args[1];
        const handlers = args.slice(2).flat();
        // app.use('/subapp', subApp)
        if (typeof path === 'string' && handler instanceof Router) {
            // Set mountpath to the specified path
            handler.mountpath = path;
            // Set App parent to current App
            handler.parent = this;
            // Prefix paths with a mountpath
            handler.middleware.forEach((mw) => {
                const patchedPath = mw.path === '/' ? handler.mountpath : handler.mountpath + mw.path;
                mw.path = patchedPath;
            });
            this.apps[path] = handler;
        }
        // app.use(subApp)
        else if (path instanceof Router) {
            // Set App parent to current App
            path.parent = this;
            // Mount on root
            path.mountpath = '/';
            this.apps['/'] = path;
        }
        else if (!(handler instanceof Router)) {
            let totalHandlers = [];
            if (typeof path !== 'string') {
                if (Array.isArray(path)) {
                    path.slice(1).map((h) => totalHandlers.push(h));
                }
            }
            if (handler) {
                if (Array.isArray(handler)) {
                    if (typeof path === 'string') {
                        handler.slice(1).map((h) => {
                            totalHandlers.push(h);
                        });
                    }
                    else {
                        for (const h of handler) {
                            totalHandlers.push(h);
                        }
                    }
                }
            }
            totalHandlers = totalHandlers.concat(handlers);
            let mainHandler;
            if (typeof path === 'string') {
                if (Array.isArray(handler)) {
                    mainHandler = handler[0];
                }
                else {
                    mainHandler = handler;
                }
            }
            else {
                if (Array.isArray(path)) {
                    mainHandler = path[0];
                }
                else {
                    mainHandler = path;
                }
                if (typeof handler === 'function') {
                    totalHandlers.unshift(handler);
                }
            }
            pushMiddleware(this.middleware)({
                path: path,
                handler: mainHandler,
                handlers: totalHandlers,
                type: 'mw',
            });
        }
        return this;
    }
}

exports.Router = Router;
