import { magenta, bold, red, cyan } from 'colorette';
import * as statusEmoji from 'http-status-emojis';
import dayjs from 'dayjs';
import { METHODS } from 'http';

const joinOutputArgs = (args, req, res, options = {}, status, msg) => {
    var _a, _b;
    const { method, url } = req;
    const { statusCode } = res;
    const methods = (_a = options.methods) !== null && _a !== void 0 ? _a : METHODS;
    const timestamp = (_b = options.timestamp) !== null && _b !== void 0 ? _b : false;
    const emojiEnabled = options.emoji;
    if (methods.includes(method)) {
        if (timestamp) {
            if (typeof timestamp !== 'boolean' && timestamp.format) {
                args.push(`${dayjs().format(timestamp.format).toString()} - `);
            }
            else {
                args.push(`${dayjs().format('HH:mm:ss').toString()} - `);
            }
        }
    }
    if (options.ip)
        args.push(req.ip);
    if (emojiEnabled)
        args.push(statusEmoji[statusCode]);
    args.push(method);
    args.push(status || res.statusCode);
    args.push(msg || res.statusMessage);
    args.push(url);
};
const logger = (options = {}) => {
    var _a, _b;
    const methods = (_a = options.methods) !== null && _a !== void 0 ? _a : METHODS;
    const output = (_b = options.output) !== null && _b !== void 0 ? _b : { callback: console.log, color: true };
    return (req, res, next) => {
        res.on('finish', () => {
            const args = [];
            if (methods.includes(req.method)) {
                const s = res.statusCode.toString();
                if (!output.color) {
                    joinOutputArgs(args, req, res, options);
                    const m = args.join(' ');
                    output.callback(m);
                }
                else {
                    switch (s[0]) {
                        case '2':
                            joinOutputArgs(args, req, res, options, cyan(bold(s)), cyan(res.statusMessage));
                            output.callback(args.join(' '));
                            break;
                        case '4':
                            joinOutputArgs(args, req, res, options, red(bold(s)), red(res.statusMessage));
                            output.callback(args.join(' '));
                            break;
                        case '5':
                            joinOutputArgs(args, req, res, options, magenta(bold(s)), magenta(res.statusMessage));
                            output.callback(args.join(' '));
                            break;
                    }
                }
            }
        });
        next === null || next === void 0 ? void 0 : next();
    };
};

export { logger };
